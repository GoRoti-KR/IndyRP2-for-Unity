// generated from rosidl_adapter/resource/msg.idl.em
// with input from moveit_msgs/msg/OrientationConstraint.msg
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/Quaternion.idl"
#include "std_msgs/msg/Header.idl"

module moveit_msgs {
  module msg {
    module OrientationConstraint_Constants {
      @verbatim (language="comment", text=
        "The different options for the orientation error parameterization" "\n"        "- Intrinsic xyz Euler angles (default value)")
      const uint8 XYZ_EULER_ANGLES = 0;
      @verbatim (language="comment", text=
        "- A rotation vector. This is similar to the angle-axis representation," "\n"        "but the magnitude of the vector represents the rotation angle.")
      const uint8 ROTATION_VECTOR = 1;
    };
    @verbatim (language="comment", text=
      "This message contains the definition of an orientation constraint.")
    struct OrientationConstraint {
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "The desired orientation of the robot link specified as a quaternion")
      geometry_msgs::msg::Quaternion orientation;

      @verbatim (language="comment", text=
        "The robot link this constraint refers to")
      string link_name;

      @verbatim (language="comment", text=
        "Tolerance on the three vector components of the orientation error (optional)" "\n"
        "This is a +/- tolerance i.e. (+ x_axis_tol, - x_axis_tol)")
      double absolute_x_axis_tolerance;

      double absolute_y_axis_tolerance;

      double absolute_z_axis_tolerance;

      @verbatim (language="comment", text=
        "Defines how the orientation error is calculated" "\n"
        "The error is compared to the tolerance defined above")
      uint8 parameterization;

      @verbatim (language="comment", text=
        "A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)")
      double weight;
    };
  };
};
