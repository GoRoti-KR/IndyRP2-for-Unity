// generated from rosidl_adapter/resource/action.idl.em
// with input from moveit_msgs/action/MoveGroup.action
// generated code does not contain a copyright notice

#include "moveit_msgs/msg/MotionPlanRequest.idl"
#include "moveit_msgs/msg/MoveItErrorCodes.idl"
#include "moveit_msgs/msg/PlanningOptions.idl"
#include "moveit_msgs/msg/RobotState.idl"
#include "moveit_msgs/msg/RobotTrajectory.idl"

module moveit_msgs {
  module action {
    @verbatim (language="comment", text=
      "Motion planning request to pass to planner")
    struct MoveGroup_Goal {
      moveit_msgs::msg::MotionPlanRequest request;

      @verbatim (language="comment", text=
        "Planning options")
      moveit_msgs::msg::PlanningOptions planning_options;
    };
    struct MoveGroup_Result {
      @verbatim (language="comment", text=
        "An error code reflecting what went wrong")
      moveit_msgs::msg::MoveItErrorCodes error_code;

      @verbatim (language="comment", text=
        "The full starting state of the robot at the start of the trajectory")
      moveit_msgs::msg::RobotState trajectory_start;

      @verbatim (language="comment", text=
        "The trajectory that moved group produced for execution")
      moveit_msgs::msg::RobotTrajectory planned_trajectory;

      @verbatim (language="comment", text=
        "The trace of the trajectory recorded during execution")
      moveit_msgs::msg::RobotTrajectory executed_trajectory;

      @verbatim (language="comment", text=
        "The amount of time it took to complete the motion plan")
      double planning_time;
    };
    struct MoveGroup_Feedback {
      @verbatim (language="comment", text=
        "The internal state that the move group action currently is in")
      string state;
    };
  };
};
